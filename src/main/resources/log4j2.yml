# 共有8个级别，按照从低到高为：ALL < TRACE < DEBUG < INFO < WARN < ERROR < FATAL < OFF
Configuration:
  status: info
  monitorInterval: 30
  Properties: # 定义全局变量
    Property: # 缺省配置（用于开发环境）。其他环境需要在VM参数中指定，如下：
      #测试：-Dlog.level.console=warn -Dlog.level.zcms=trace
      #生产：-Dlog.level.console=warn -Dlog.level.zcms=info
      - name: log.level.console
        value: info
      - name: log.path
        value: F:/logs/springboot/zcms
      - name: project.name
        value: zcms
      - name: log.pattern
        value: "%d{yyyy-MM-dd HH:mm:ss} -%5p ${PID:-} [%15.15t] %-30.30C{1} : %m%n"
  Appenders:
    Console:  #输出到控制台
      name: CONSOLE
      target: SYSTEM_OUT
      PatternLayout:
        pattern: ${log.pattern}
#   启动日志
    RollingFile:
      - name: ROLLING_FILE
        fileName: ${log.path}/basic/${project.name}.log
        filePattern: "${log.path}/basic/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Filters:
#        一定要先去除不接受的日志级别，然后获取需要接受的日志级别
          ThresholdFilter:
            - level: error
              onMatch: DENY
              onMismatch: NEUTRAL
            - level: info
              onMatch: ACCEPT
              onMismatch: DENY
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
#   客户端接口
      - name: API_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/api/${project.name}_api.log
        filePattern: "${log.path}/api/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
#   服务器接口
      - name: SERVER_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/server/${project.name}_server.log
        filePattern: "${log.path}/server/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
#   业务日志
      - name: BUSSINESS_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/bussiness/${project.name}_bussiness.log
        filePattern: "${log.path}/bussiness/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
#   错误日志
      - name: EXCEPTION_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/exception/${project.name}_exception.log
        filePattern: "${log.path}/exception/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        ThresholdFilter:
          level: error
          onMatch: ACCEPT
          onMismatch: DENY
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
#   DB 日志
      - name: DB_ROLLING_FILE
        ignoreExceptions: false
        fileName: ${log.path}/db/${project.name}_db.log
        filePattern: "${log.path}/db/$${date:yyyy-MM}/${project.name}-%d{yyyy-MM-dd}-%i.log.gz"
        PatternLayout:
          pattern: ${log.pattern}
        Policies:
          TimeBasedTriggeringPolicy:  # 按天分类
            modulate: true
            interval: 1
        DefaultRolloverStrategy:     # 文件最多30个
          max: 30
  Loggers:
    Root:
      level: info
      AppenderRef:
        - ref: CONSOLE
        - ref: ROLLING_FILE
        - ref: EXCEPTION_ROLLING_FILE
    Logger:
      - name: api
        level: info
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: API_ROLLING_FILE
          
      - name: bussiness
        level: info
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: BUSSINESS_ROLLING_FILE
          
      - name: exception
        level: debug
        additivity: true
        AppenderRef:
          - ref: CONSOLE
          - ref: EXCEPTION_ROLLING_FILE
          
      - name: db
        level: trace
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: DB_ROLLING_FILE

      - name: server
        level: info
        additivity: false
        AppenderRef:
          - ref: CONSOLE
          - ref: SERVER_ROLLING_FILE

#    监听具体包下面的日志
#    Logger: # 为com.skych包配置特殊的Log级别，方便调试
#      - name: com.skych
#        additivity: false
#        level: ${sys:log.level.skych}
#        AppenderRef:
#          - ref: CONSOLE









#通过lambda表达式，实现先检测日志级别，再设置参数
#logger.trace("One parameter {}. Some long-running operation returned {}", () -> var1, () -> expensiveOperation())
#status=error
#dest=err
#name=PropertiesConfig
##检测是否需要更新配置
#monitorInterval=30
# 
#property.filename=zcms
#property.log_dir=D:\\logs\\
# 
#filter.threshold.type=ThresholdFilter
#filter.threshold.level=debug
#
##追加到控制台。控制台数据的日志，会被tomcat的日志捕获并写到日志文件中
#appender.console.type=Console
#appender.console.name=STDOUT
#appender.console.layout.type=PatternLayout
#appender.console.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c{1} - %m%n
#appender.console.filter.threshold.type=ThresholdFilter
##控制台只输出level及以上级别的日志
#appender.console.filter.threshold.level=trace
# 
# #追加到轮换文件
#appender.rolling.type=RollingFile
#appender.rolling.name=RollingFile
#appender.rolling.fileName=${log_dir}${filename}.log
##旧的日志文件的压缩文件名格式
#appender.rolling.filePattern=${log_dir}${filename}-%d{yyyy-MM-dd}.log.gz
#appender.rolling.layout.type=PatternLayout
#appender.rolling.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c{1} - %m%n
#appender.rolling.policies.type=Policies
##按日期将日志写到不同的文件件中，间隔1，即每天写到新的文件中(间隔的幅度是天还是小时，与filePattern有关？)
#appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
#appender.rolling.policies.time.interval=1
#appender.rolling.policies.time.modulate=true
##按文件大小，超过100M之后写到新的文件中
#appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
#appender.rolling.policies.size.size=100MB
##文件夹中最多保存30个日志文件，多于30个则删除最早的文件
#appender.rolling.strategy.type=DefaultRolloverStrategy
#appender.rolling.strategy.max=30
#
##定义一个日志，继承根日志
##name用于指定操作哪个类或者哪个包路径下的日志。如果只在文件中输出而不打印到控制台，把有关控制台的配置去掉。异步日志处理需要额外配置。 
#logger.rolling.name=com.iotzc.zcms
#logger.rolling.level=trace
##当前的日志时间不要传播到父日志
#logger.rolling.additivity=false
#logger.rolling.appenderRef.rolling.ref=RollingFile
# 
#logger.console.name=com.iotzc.zcms.dao
#logger.console.level=trace
#logger.console.additivity=false
#logger.console.appenderRef.stdout.ref=STDOUT
# #根日志
#rootLogger.level=info
#rootLogger.appenderRef.stdout.ref=STDOUT