#通过lambda表达式，实现先检测日志级别，再设置参数
#logger.trace("One parameter {}. Some long-running operation returned {}", () -> var1, () -> expensiveOperation())

status=error
dest=err
name=PropertiesConfig
#检测是否需要更新配置
monitorInterval=30
 
property.filename=zcms
property.log_dir=D:\\logs\\
 
filter.threshold.type=ThresholdFilter
filter.threshold.level=debug

#追加到控制台。控制台数据的日志，会被tomcat的日志捕获并写到日志文件中
appender.console.type=Console
appender.console.name=STDOUT
appender.console.layout.type=PatternLayout
appender.console.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c{1} - %m%n
appender.console.filter.threshold.type=ThresholdFilter
#控制台只输出level及以上级别的日志
appender.console.filter.threshold.level=trace
 
 #追加到轮换文件
appender.rolling.type=RollingFile
appender.rolling.name=RollingFile
appender.rolling.fileName=${log_dir}${filename}.log
#旧的日志文件的压缩文件名格式
appender.rolling.filePattern=${log_dir}${filename}-%d{yyyy-MM-dd}.log.gz
appender.rolling.layout.type=PatternLayout
appender.rolling.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c{1} - %m%n
appender.rolling.policies.type=Policies
#按日期将日志写到不同的文件件中，间隔1，即每天写到新的文件中(间隔的幅度是天还是小时，与filePattern有关？)
appender.rolling.policies.time.type=TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval=1
appender.rolling.policies.time.modulate=true
#按文件大小，超过100M之后写到新的文件中
appender.rolling.policies.size.type=SizeBasedTriggeringPolicy
appender.rolling.policies.size.size=100MB
#文件夹中最多保存30个日志文件，多于30个则删除最早的文件
appender.rolling.strategy.type=DefaultRolloverStrategy
appender.rolling.strategy.max=30

#定义一个日志，继承根日志
#name用于指定操作哪个类或者哪个包路径下的日志。如果只在文件中输出而不打印到控制台，把有关控制台的配置去掉。异步日志处理需要额外配置。 
logger.rolling.name=com.iotzc.zcms
logger.rolling.level=trace
#当前的日志时间不要传播到父日志
logger.rolling.additivity=false
logger.rolling.appenderRef.rolling.ref=RollingFile
 
logger.console.name=com.iotzc.zcms.dao
logger.console.level=trace
logger.console.additivity=false
logger.console.appenderRef.stdout.ref=STDOUT
 #根日志
rootLogger.level=info
rootLogger.appenderRef.stdout.ref=STDOUT